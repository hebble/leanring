package com.learning.study.设计模型;

public class CAP理论和BASE理论 {
    /**
     * CAP理论:
     *      在设计和部署分布式系统时，存在三个明显的需求:
     *          C(Consistency)一致性。即分布式数据应该同步，保存一致。
     *          A(Availability)可用性。指系统能够很好的为用户提供服务，主要体现在用户访问之后能很快的得到响应。
     *          P(Oartition Tolerance)分区容错性。若在系统运行过程中，有部分主机宕机，依然不会影响整个系统的运行。
     *      CAP理论的忠告是：架构师不要将精力浪费在如何设计满足三者完美分布式系统，而是应该进行取舍。
     *      CAP理论认为在一个系统中对某个数据不存在一个算法同时满足一致性，可用性，分区容错性。往往需要牺牲某一项来满足其他两项。对于满足CA的例子也很常见，例如MySQL。
     *      关系型数据库是典型的CA模型。
     *          - Atomicty（原子性）。对于一个事物，所有的操作都是一次性完成，所以我们可以把它看成是原子的，不可分割的。要么都发生, 要么都不发生
     *          - Consistency（一致性）。在事物开始和结束的过程中，数据库中的数据应该是不变的，也就是说，这个过程是一致的状态。
     *          - Isolation（隔离性）。事物在操作的过程，并不知晓其他事物的存在。
     *          - Durability(持久性)一旦事物完成就不能返回。它对数据库中数据的改变是永久性的
     *
     * BASE理论:
     *      BASE模型完全不同于ACID模型。它强调：
     *          Basically， Available（基本可用），支持分区失败。也就是说，在一定程度上牺牲了可扩展性。
     *          Soft State（软状态），状态可以有一段时间不同步，异步同步。
     *          Eventually Consistent（最终一致）。保证数据在最终是一致的，而无需保证实时数据一致。
     *      NoSQL就继承了BASE的思想。
     *
     *      ZooKeeper 保证的是 CP。 任何时刻对 ZooKeeper 的读请求都能得到一致性的结果，但是， ZooKeeper 不保证每次请求的可用性比如在 Leader 选举过程中或者半数以上的机器不可用的时候服务就是不可用的。
     *      Eureka 保证的则是 AP。 Eureka 在设计的时候就是优先保证 A （可用性）。在 Eureka 中不存在什么 Leader 节点，每个节点都是一样的、平等的。因此 Eureka 不会像 ZooKeeper 那样出现选举过程中或者半数以上的机器不可用的时候服务就是不可用的情况。 Eureka 保证即使大部分节点挂掉也不会影响正常提供服务，只要有一个节点是可用的就行了。只不过这个节点上的数据可能并不是最新的。
     *      Nacos 不仅支持 CP 也支持 AP。
     *
     * 总结:
     *      CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸，ACID 是数据库事务完整性的理论。
     *      CAP理论严格来讲不是三选二，而是CP、AP二选一，因为通常P（分区容错性）是必须得到保证的。
     *      BASE理论面向的是大型高可用、可扩展的分布式系统。与传统ACID特性相反，不是强一致性模型，BASE提出通过牺牲强一致性来获得可用性，并允许数据一段时间内的不一致，但是最终需要达到一致状态。
     */
}

